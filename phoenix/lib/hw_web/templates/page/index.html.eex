<html>               
<head>
<style>
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100&display=swap');

		#canvas {
			display: block;
			margin: 0;
			background-color: rgb(36,40,48);
			
		}

</style>
</head>


<body>
<div>
<img src="snd.png" alt="render image" id='image1' >
<p>🪀🪀🪀🪀🪀🪀🪀🪀 W A S D ▼   🎃🎄🎃🎄</p>
</div>
<div>
<canvas id="canvas"  width=960 height=540></canvas>
</div>
</body>


	<script type='text/javascript' src='snd.js'></script>
	<script type='text/javascript'>//<![CDATA[

		const GODOT_CONFIG = {"args":[],"canvasResizePolicy":0,"executable":"snd","experimentalVK":true,"fileSizes":{"snd.pck":333333,"snd.wasm":12665632},"gdnativeLibs":[]};
		var engine = new Engine(GODOT_CONFIG);

		(function() {

			var animationCallbacks = [];
			function animate(time) {
				animationCallbacks.forEach(callback => callback(time));
				requestAnimationFrame(animate);
			}
			requestAnimationFrame(animate);

			function setStatusMode(mode) {
        console.log(1)
			}

			function animateStatusIndeterminate(ms) {
				var i = Math.floor(ms / INDETERMINATE_STATUS_STEP_MS % 8);
				if (statusIndeterminate.children[i].style.borderTopColor == '') {
					Array.prototype.slice.call(statusIndeterminate.children).forEach(child => {
						child.style.borderTopColor = '';
					});
					statusIndeterminate.children[i].style.borderTopColor = '#dfdfdf';
				}
			}

			function setStatusNotice(text) {
				while (statusNotice.lastChild) {
					statusNotice.removeChild(statusNotice.lastChild);
				}
				var lines = text.split('\n');
				lines.forEach((line) => {
					statusNotice.appendChild(document.createTextNode(line));
					statusNotice.appendChild(document.createElement('br'));
				});
			};

			function displayFailureNotice(err) {
				var msg = err.message || err;
				console.error(msg);
				setStatusNotice(msg);
				setStatusMode('notice');
				initializing = false;
			};

			if (!Engine.isWebGLAvailable()) {
				displayFailureNotice('WebGL not available');
			} else {
				setStatusMode('indeterminate');
				engine.startGame({
					'onProgress': function (current, total) {
						console.log("Loaded " + current + " of " + total + " bytes");
						if (total > 0) {
							statusProgressInner.style.width = current/total * 100 + '%';
							setStatusMode('progress');
							if (current === total) {
								// wait for progress bar animation
								setTimeout(() => {
									setStatusMode('indeterminate');
								}, 500);
							}
						} else {
							setStatusMode('indeterminate');
						}
					},
				}).then(() => {
					setStatusMode('hidden');
					initializing = false;
				}, displayFailureNotice);
			}
		})();
	//]]></script>

</html>